generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  walletType   String?  @map("wallet_type")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id                 String               @id @default(cuid())
  createdAt          DateTime             @default(now()) @map("created_at")
  updatedAt          DateTime             @updatedAt @map("updated_at")
  name               String?
  status             String?
  isAdmin            Boolean              @default(false) @map("is_admin")
  defaultAddress     String?              @unique @map("default_address")
  nonce              String?
  email              String?              @unique
  emailVerified      DateTime?            @map("email_verified")
  image              String?
  sumsubId           String?              @map("sumsub_id")
  sumsubType         String?              @map("sumsub_type")
  sumsubResult       Json?                @map("sumsub_result")
  sumsubStatus       String?              @map("sumsub_status")
  whitelists         String[]
  loginRequests      LoginRequest[]
  accounts           Account[]
  sessions           Session[]
  transactions       Transaction[]
  unsupportedWallets UnsupportedWallets[]
  wallets            Wallet[]
  mobileVerification MobileVerification[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Wallet {
  id              Int      @id @default(autoincrement())
  type            String?
  changeAddress   String   @unique @map("change_address")
  unusedAddresses String[] @map("unused_addresses")
  usedAddresses   String[] @map("used_addresses")
  userId          String   @map("user_id")
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("wallets")
}

model ContributionRound {
  id                  String        @id @default(cuid())
  name                String
  saleType            String        @map("sale_type")
  startDate           DateTime      @map("start_date")
  endDate             DateTime      @map("end_date")
  tokenTicker         String        @map("token_ticker")
  tokenTarget         Int           @map("token_target")
  currency            String
  price               Float
  deposited           Float
  whitelistSlug       String?       @unique @map("whitelist_slug")
  transaction         Transaction[]
  projectName         String        @map("project_name")
  projectSlug         String        @map("project_slug")
  recipientAddress    String?       @map("recipient_address")
  restrictedCountries String[]      @map("restricted_countries")

  @@map("contribution_rounds")
}

model Transaction {
  id                String            @id @default(cuid())
  description       String?
  amount            String
  currency          String
  address           String
  completed         Boolean           @default(false)
  txId              String?           @map("tx_id")
  createdAt         DateTime          @default(now()) @map("created_at")
  updatedAt         DateTime          @updatedAt @map("updated_at")
  userId            String            @map("user_id")
  user              User              @relation(fields: [userId], references: [id])
  contributionId    String            @map("contribution_id")
  contributionRound ContributionRound @relation(fields: [contributionId], references: [id])

  onChainTxData Json? @map("on_chain_tx_data")

  @@map("transactions")
}

enum LoginRequestStatus {
  PENDING
  SIGNED
  EXPIRED
}

model LoginRequest {
  id             Int                @id @default(autoincrement())
  verificationId String             @unique @map("verification_id")
  message        String
  status         LoginRequestStatus
  signedMessage  String?            @map("signed_message")
  proof          String?
  createdAt      DateTime           @default(now()) @map("created_at")
  updatedAt      DateTime           @updatedAt @map("updated_at")
  userId         String             @map("user_id")
  user           User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("login_requests")
}

model UnsupportedWallets {
  id              Int      @id @default(autoincrement())
  type            String?
  changeAddress   String   @unique
  unusedAddresses String[]
  usedAddresses   String[]
  userId          String   @map("user_id")
  users           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("unsupported_wallets")
}

model KeyValuePair {
  key       String    @id
  value     String
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  expiresAt DateTime? @map("expires_at")

  @@map("key_value_pair")
}

model MobileVerification {
  verificationId String   @id @default(cuid())
  createdAt      DateTime @default(now()) @map("created_at")
  address        String?
  userId         String   @map("user_id")
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("mobile_verification")
}
