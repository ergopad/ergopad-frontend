generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("POSTGRES_PRISMA_URL")
  directUrl         = env("POSTGRES_URL_NON_POOLING")
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  walletType   String?
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id             String         @id @default(cuid())
  created_at     DateTime       @default(now())
  updated_at     DateTime       @updatedAt
  name           String?
  defaultAddress String?        @unique @map("default_address")
  nonce          String?
  email          String?        @unique
  emailVerified  DateTime?      @map("email_verified")
  image          String?
  sumsubId       String?        @map("sumsub_id")
  sumsubType     String?        @map("sumsub_type")
  sumsubResult   Json?          @map("sumsub_result")
  sumsubStatus   String?        @map("sumsub_status")
  accounts       Account[]
  sessions       Session[]
  wallets        Wallet[]
  loginRequests  LoginRequest[]
  transactions   Transaction[]
  whitelists     String[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Wallet {
  id              Int      @id @default(autoincrement())
  type            String?
  changeAddress   String   @unique
  unusedAddresses String[]
  usedAddresses   String[]
  user_id         String
  user            User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("wallets")
}

model Transaction {
  id          String   @id @default(cuid())
  description String
  amount      String
  currency    String
  address     String
  completed   Boolean  @default(false)
  created_at  DateTime @default(now())
  user_id     String
  user        User     @relation(fields: [user_id], references: [id])

  @@map("transactions")
}

enum LoginRequestStatus {
  PENDING
  SIGNED
  EXPIRED
}

model LoginRequest {
  id             Int                @id @default(autoincrement())
  user_id        String
  user           User               @relation(fields: [user_id], references: [id], onDelete: Cascade)
  verificationId String             @unique
  message        String // The message to be signed, which is the nonce from the User model
  status         LoginRequestStatus
  signedMessage  String?
  proof          String?
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
}
